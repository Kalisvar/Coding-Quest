<h2><a href="https://leetcode.com/problems/two-sum">1. Two Sum</a></h2>
<h3>Easy</h3>
<hr>
<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>You can return the answer in any order.</p>
<p>&nbsp;</p>
<p><strong class="example">Example 1:</strong></p>
<pre>
<strong>Input:</strong> nums = [2, 7, 11, 15], target = 9
<strong>Output:</strong> [0, 1]
<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].
</pre>
<p><strong class="example">Example 2:</strong></p>
<pre>
<strong>Input:</strong> nums = [3, 2, 4], target = 6
<strong>Output:</strong> [1, 2]
<strong>Explanation:</strong> Because nums[1] + nums[2] == 6, we return [1, 2].
</pre>
<p><strong class="example">Example 3:</strong></p>
<pre>
<strong>Input:</strong> nums = [3, 3], target = 6
<strong>Output:</strong> [0, 1]
<strong>Explanation:</strong> Because nums[0] + nums[1] == 6, we return [0, 1].
</pre>
<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>
<ul>
    <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>
    <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
    <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>
    <li>Only one valid answer exists.</li>
</ul>
<p>&nbsp;</p>
<p><strong>Approach:</strong></p>
<p>To solve the Two Sum problem, we can use a hash map to store the difference between the target and each element of the array as we iterate through it. Here’s a step-by-step explanation:</p>
<ol>
    <li>Create an empty hash map to store the indices of the elements we’ve seen so far.</li>
    <li>Iterate through the array, for each element:
        <ul>
            <li>Calculate the complement by subtracting the current element from the target.</li>
            <li>Check if the complement exists in the hash map.</li>
            <li>If it does, return the indices of the complement and the current element.</li>
            <li>If it doesn't, add the current element and its index to the hash map.</li>
        </ul>
    </li>
</ol>
<p>This approach ensures that we find the solution in linear time, O(n).</p>
<p>&nbsp;</p>
<p><strong>Code Implementation:</strong></p>
